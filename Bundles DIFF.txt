diff --git a/ActiveProbe/OsX/AP/Common/BundleUtils.cpp b/ActiveProbe/OsX/AP/Common/BundleUtils.cpp
index 1885eb6..7a191b6 100644
--- a/ActiveProbe/OsX/AP/Common/BundleUtils.cpp
+++ b/ActiveProbe/OsX/AP/Common/BundleUtils.cpp
@@ -1 +1,105 @@
+#pragma once
+
 #include "BundleUtils.h"
+#include <map>
+#include <string>
+#include <type_traits>
+#include <boost/any.hpp>
+#include <boost/lexical_cast.hpp>
+#include <boost/tokenizer.hpp>
+#include <iterator>
+#include "PlistConfigurator.h"
+#include "Plist.hpp"
+#include "PlistDate.hpp"
+
+/*
+optional string containerIdentifier = 1 [GUID_ID=true];
+optional bytes signatureSha1 = 2 [GUID_ID=true]; // optional GUID, only for signed bundles
+optional bytes signatureSha256 = 3 [GUID_ID=true]; // optional GUID, only for signed bundles
+optional string mainExectuableFile = 4 [GUID_ID=true]; // alternative GUID when unsigned
+optional string displayName = 5;
+repeated string alternateName = 6;
+optional FileHash codeSignFile = 7;
+optional FileHash infoPlistFile = 8;
+optional ContainerType bundleType = 9;
+optional bool isSandbox = 10;
+optional AppStoreCategory appStoreCategory = 11;
+optional int64 AppStoreAdamID = 12;
+*/
+namespace BundleUtils
+{
+    typedef std::map<std::string, boost::any> dict_t;
+    
+    std::string loadString(const boost::any &val)
+    {
+        return boost::any_cast<typename std::add_lvalue_reference<typename std::add_const<std::string>::type>::type >(val);
+    }
+
+    // TEMP FUNCTIONS THAT I BORROWED FOR START, SHOULDN'T BE HERE
+    InfoPlistInfo parseInfoPlist(const std::string &appPath)
+    {
+        std::string infoPlistPath = appPath+"/Contents/Info.plist";
+        std::ifstream f;
+        f.open(infoPlistPath);
+        if (!f.is_open())
+        {
+            // throw some other exception
+            throw ConfigurationException("Could not open info.plist file: " + infoPlistPath);
+        }
+        InfoPlistInfo retValue;
+        retValue.infoPlistFilePath = infoPlistPath; // infoPlistFile - should be FileHash
+
+        try
+        {
+            dict_t dict;
+            Plist::readPlist(f, dict);
+            
+            retValue.infoPlistFilePath = infoPlistPath; // infoPlistFile - should be FileHash
+            retValue.codeSignFilePath = appPath+"/Contents/_CodeSignature/CodeResources";
+            
+            for (auto &keyValuePair : dict) {
+                std::string key = keyValuePair.first;
 if (keyValuePair.first == "CFBundleIdentifier") // containerIdentifier
+                {
+                    retValue.bundleIdentifier = loadString(keyValuePair.second);
+                    continue;
+                }
+                else if (keyValuePair.first == "CFBundleName") // displayName
+                {
+                    retValue.displayName = loadString(keyValuePair.second);
+                    continue;
+                }
+                else if (keyValuePair.first == "CFBundleExecutable") // mainExectuableFile
+                {
+                    retValue.mainExectuableFile = loadString(keyValuePair.second);
+                    continue;
+                }
+                else if (keyValuePair.first == "LSApplicationCategoryType") // appStoreCategory
+                {
+                    retValue.appStoreCategory = loadString(keyValuePair.second);
+                    continue;
+                }
+                else if (keyValuePair.first == "CFBundleIconFile") // iconFile
+                {
+                    retValue.iconFilePath = loadString(keyValuePair.second);
+                    continue;
+                }
+            }
+        }
+        catch (boost::bad_any_cast &e)
+        {
+            f.close();
+            // other exception
+            throw ConfigurationException("Could not parse info.plist file: " + infoPlistPath);
+        }
+        f.close();
+        return retValue;
+    }
+    // END OF TEMP FUNCTIONS THAT I BORROWED
+
+    bool extractInfoPlistInfo(std::string& appPath)
+    {
+        InfoPlistInfo infoPlistData = parseInfoPlist(appPath);      
+        return true;
+    }
+}
diff --git a/ActiveProbe/OsX/AP/Common/BundleUtils.h b/ActiveProbe/OsX/AP/Common/BundleUtils.h
index e69de29..a942846 100644
--- a/ActiveProbe/OsX/AP/Common/BundleUtils.h
+++ b/ActiveProbe/OsX/AP/Common/BundleUtils.h
@@ -0,0 +1,16 @@
+#include "APCommon.h"
+
+namespace BundleUtils {
+    struct InfoPlistInfo
+    {
+        std::string bundleIdentifier; // container identifier
+        std::string mainExectuableFile; //
+        std::string displayName;
+        std::string codeSignFilePath;
+        std::string infoPlistFilePath;
+        std::string iconFilePath; // required?
+        std::string appStoreCategory;
+    };
:
AP_PROTO_EXPORT bool extractInfoPlistInfo(std::string& appPath);
+}
diff --git a/ActiveProbe/OsX/AP/Common/MachineUtilsOsx.cpp b/ActiveProbe/OsX/AP/Common/MachineUtilsOsx.cpp
index 2930fe3..31d03ef 100644
--- a/ActiveProbe/OsX/AP/Common/MachineUtilsOsx.cpp
+++ b/ActiveProbe/OsX/AP/Common/MachineUtilsOsx.cpp
@@ -21,6 +21,11 @@
 #include <iomanip>
 #include <sstream>
 
+// TESTING for drivers:
+#include <IOKit/kext/KextManager.h>
+#include <CoreFoundation/CFArray.h>
+
+
 #define SYSTEM_CONFIG_ACTIVE_DIRECTORY_KEY_NAME "com.apple.opendirectoryd.ActiveDirectory"
 #define SYSTEM_CONFIG_DOMAIN_FOREST_NAME_KEY "DomainForestName"
 #define SYSTEM_CONFIG_SYSTEM_FOREST_KEY_NAME "Setup:/System"
@@ -53,6 +58,17 @@ namespace MachineUtils {
         metroHash.Update(uuid.c_str(), uuid.length());
         uint64_t hash = metroHash.FinalHash();
         
+        // start kext experiment
+        CFStringRef keys[2];
+        keys[0] = CFSTR("CFBundleIdentifier");
+        keys[1] = CFSTR("OSBundlePath");
+        CFArrayRef cfKeys = CFArrayCreate(NULL, (void *)keys, 2, &kCFTypeArrayCallBacks);
+                
+        CFDictionaryRef  kextDict = KextManagerCopyLoadedKextInfo(NULL, cfKeys);
+        std::cout << kextDict;
+        //release it
+        // end kext experiment
+        
         return std::to_string(hash);
     }
     
diff --git a/ActiveProbe/OsX/APLib/Common/SignatureVerify.cpp b/ActiveProbe/OsX/APLib/Common/SignatureVerify.cpp
index a53acfe..24700a8 100644
--- a/ActiveProbe/OsX/APLib/Common/SignatureVerify.cpp
+++ b/ActiveProbe/OsX/APLib/Common/SignatureVerify.cpp
@@ -74,8 +74,9 @@ const std::string firstCertificateIssuerName(SecStaticCodeRef staticCode) {
         return std::string();   // failure;
 }
 
-SignatureVerifier::SignatureStatus SignatureVerifier::verifySignature(const std::string &fileName, FileHash* fileInfo)
+SignatureVerifier::SignatureStatus SignatureVerifier::verifySignature(const std::string &fileName1, FileHash* fileInfo)
 {
+    std::string fileName = "/Applications/TextWrangler.app";
     CFRef<SecStaticCodeRef> staticCode;
     if (errSecSuccess != SecStaticCodeCreateWithPath(CFTempURL(fileName.c_str()), kSecCSDefaultFlags, &staticCode.aref()))
         return SignatureStatus::VERIFY_INTERNAL_ERROR;
diff --git a/ActiveProbe/OsX/CoreMinion/Collectors/MachineInfoCollector/Collector/MachineInfoCollector.cpp b/ActiveProbe/OsX/CoreMinion/Collectors/MachineInfoCollector/Collector/MachineInfoCollector.cpp
index cfd64be..1a418c1 100755
--- a/ActiveProbe/OsX/CoreMinion/Collectors/MachineInfoCollector/Collector/MachineInfoCollector.cpp
+++ b/ActiveProbe/OsX/CoreMinion/Collectors/MachineInfoCollector/Collector/MachineInfoCollector.cpp
@@ -11,6 +11,8 @@
 #include <Common/Logger.h>
 #include <RAIIUtils.h>
 
+#include <BundleUtils.h>
 void MachineInfoCollector::init()
 {
     auto item = _db->getTable<MachineInfo>()->getOrCreate(MachineUtils::getComputerName());
@@ -155,6 +157,28 @@ void MachineInfoCollector::collect()
     _db->getTable<MachineInfo>()->commit(machineInfo);
     
     TRY_EXCEPT(updateMountPoints(), LOG(Logger::error) << "Exception in updateMountPoints(): " << e.what());
+    
+    std::string apps[] = {"App Store.app", "Numbers.app", "Automator.app", "Packages.app", "Calculator.app", "Pages.app", "Calendar.app", "Photo Booth.app", "Chess.app", "Photos.app", "Contacts.app", "Preview.app", "DVD Player.app", "Pulse Secure.app", "Dashboard.app", "PyCharm.app", "Dictionary.app", "QuickTime Player.app", "ESET NOD32 Antivirus.app", "Reminders.app", "FaceTime.app", "p4merge.app", "Xcode.app", "TextWrangler.app", "System Preferences.app", "Launchpad.app", "Maps.app", "Google Chrome.app", "Safari.app", "Mail.app"};
+    
+    
+//    Font Book.app                Siri.app
+//    GarageBand.app               Stickies.app
+//    
+//    Image Capture.app            TextEdit.app
+//    Keynote.app
+//                    Time Machine.app
+//                         Utilities
+//    
+//    Messages.app                 iBooks.app
+//    Microsoft Remote Desktop.app iMovie.app
+//    Mission Control.app          iTunes.app
+//    Notes.app
+    for (std::string app : apps)
+    {
+        std::string appPath = "/Applications/" + app;
+        BundleUtils::extractInfoPlistInfo(appPath);
+
+    }
 }
 
 void MachineInfoCollector::postCollect()
